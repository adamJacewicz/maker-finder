generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Skill {
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  MOBILE_DEVELOPER
  DATA_SCIENTIST
  UI_DESIGNER
  UX_DESIGNER
  TESTER
  FULLSTACK_DEVELOPER
  SCRUM_MASTER
  PROJECT_MANAGER
  PRODUCT_OWNER
  BUSINESS_ANALYST
  CYBER_SECURITY_ENGINEER
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String                @id @default(uuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?             @map("email_verified")
  image               String?
  profilesChecked     Like[]                @relation("ProfilesChecked")
  targetChecks        Like[]                @relation("TargetProfiles")
  skill               Skill?
  description         String?
  filter              ProfileFilter?
  timezone            String?
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @default(now()) @map("updated_at")
  accounts            Account[]
  sessions            Session[]
  ConversationUser    ConversationUser[]
  ConversationMessage ConversationMessage[]

  @@map("users")
}

model Like {
  id         String   @id @default(uuid())
  user       User     @relation("ProfilesChecked", fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")
  targetUser User     @relation("TargetProfiles", fields: [targetId], references: [id], onDelete: Cascade)
  targetId   String   @map("target_id")
  liked      Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("likes")
}

model ProfileFilter {
  id       String  @id @default(uuid())
  skill    Skill?
  timezone String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("filters")
}

model Conversation {
  id        String                @id @default(uuid())
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @default(now()) @map("updated_at")
  users     ConversationUser[]
  messages  ConversationMessage[]

  @@map("conversations")
}

model ConversationUser {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @map("conversation_id")
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @map("user_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")

  @@map("conversation_users")
}

model ConversationMessage {
  id             String       @id @default(uuid())
  content        String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @map("conversation_id")
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @map("user_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")

  @@map("conversation_messages")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
