generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Profession {
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  MOBILE_DEVELOPER
  DATA_SCIENTIST
  UI_DESIGNER
  UX_DESIGNER
  TESTER
  FULLSTACK_DEVELOPER
  SCRUM_MASTER
  PROJECT_MANAGER
  PRODUCT_OWNER
  BUSINESS_ANALYST
  CYBER_SECURITY_ENGINEER
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  emailVerified   DateTime?   @map("email_verified")
  image           String?
  profilesChecked Match[]     @relation("ProfilesChecked")
  targetChecks    Match[]     @relation("TargetProfiles")
  profession      Profession?
  description     String?
  filter          Filter?
  passwordHash    String?
  passwordSalt    String?
  timezone        String?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @default(now()) @map("updated_at")
  accounts        Account[]
  sessions        Session[]

  Message          Message[]
  ConversationUser ConversationUser[]

  @@map("users")
}

model Match {
  id         Int      @id @default(autoincrement())
  user       User     @relation("ProfilesChecked", fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @map("user_id")
  targetUser User     @relation("TargetProfiles", fields: [targetId], references: [id], onDelete: Cascade)
  targetId   Int      @map("target_id")
  liked      Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("matches")
}

model Filter {
  id         Int         @id @default(autoincrement())
  profession Profession?
  timezone   String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("filters")
}

model Conversation {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @default(now()) @map("updated_at")
  users     ConversationUser[]
  messages  Message[]

  @@map("conversations")
}

model ConversationUser {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int          @map("conversation_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int          @map("user_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")
  read           Boolean      @default(false)

  @@map("conversation_users")
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int          @map("conversation_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int          @map("user_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")

  @@map("messages")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
